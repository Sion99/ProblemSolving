# 골드 5 20055. 컨베이어 벨트 위의 로봇

# 길이가 N인 컨베이어 벨트가 있고, 길이가 2N인 벨트가 전체를 감싸며 돌고 있음
# 벨트는 1~2N까지 번호가 매겨져 있다.

#  1    2    3   ...   N-1    N
# 2N  2N-1  2N-2 ...   N+2   N+1

# 벨트가 한 칸 회전하면 1번부터 2N-1번까지의 칸은 다음 번호의 칸으로 이동하고
# 2N번 칸은 1번칸의 위치로 이동한다.
# i번 칸의 내구도는 A[i]다.
# 1번 칸을 "올리는 위치", N번 칸을 "내리는 위치"라고 한다.

# 박스 로봇은 "올리는 위치"에만 올릴 수 있다.
# 언제든지 로봇이 "내리는 위치"에 도달하면 그 즉시 내린다.
# 로봇은 컨베이어 벨트 위에서 스스로 이동할 수 있다.

# 로봇을 올리는 위치에 올리거나 로봇이 어떤 칸으로 이동하면 그 칸의 내구도는 즉시 1만큼 감소

# 로봇을 옮기는 과정에서는 아래 과정이 순서대로 일어난다.

# 1. 벨트가 각 칸 위에 있는 로봇과 함께 한 칸 회전한다.
# 2. 가장 먼저 벨트에 올라간 로봇부터, 벨트가 회전하는 방향으로 한 칸 이동할 수 있다면 이동한다.
#   만약 이동할 수 없다면 가만히 있는다.
# 3. 올리는 위치에 있는 칸의 내구도가 0이 아니면 올리는 위치에 로봇을 올린다.
# 4. 내구도가 0인 칸의 개수가 K개 이상이라면 과정을 종료한다. 그렇지 않으면 1번으로 돌아간다.

# 종료되었을 때 몇 번째 단계가 진행 중이었는지 구해보자.

import sys

input = sys.stdin.readline

n, k = map(int, input().rstrip().split())
arr = list(map(int, input().rstrip().split()))
belt = [0] * 2 * n

round = 1
while True:
    # 1. 벨트가 각 칸 위에 있는 로봇과 함께 한 칸 회전한다.
    arr.insert(0, arr.pop())
    belt.insert(0, belt.pop())

    # "내리는 위치"에 있는 박스 로봇은 무조건 제거된다.
    belt[n-1] = 0


    # 2. 가장 먼저 벨트에 올라간 로봇부터, 벨트가 회전하는 방향으로 한 칸 이동할 수 있다면 이동한다.
    # 로봇이 이동할 때 내구도가 감소한다.
    for i in range(n-2, -1, -1):
        if belt[i] != 0 and belt[i+1] == 0 and arr[i+1] > 0:
            belt[i] = 0
            belt[i+1] = 1
            arr[i+1] -= 1
    
    # "내리는 위치"에 있는 박스 로봇은 무조건 제거된다.
    belt[n-1] = 0

    # 3. 올리는 위치에 있는 칸의 내구도가 0이 아니라면 올리는 위치에 로봇을 올린다.
    if arr[0] > 0:
        belt[0] = 1
        arr[0] -= 1

    # 4. 내구도가 0인 칸의 개수가 K개 이상이라면 과정을 종료한다.
    if arr.count(0) >= k:
        break
    round += 1

print(round)
